{"version":3,"sources":["../static/js/index.js"],"names":["form","document","querySelector","inputs","elements","statusSent","submitButton","REGEX","EMAIL","COUNTRY_CODE","schema","firstName","name","required","minLength","lastName","email","regex","phonePrefix","phone","integer","errorMessages","getMinLength","value","getRequired","getRightFormat","getOnlyNumbers","checkValidity","schemaObject","result","item","hasOwnProperty","length","test","Number","handleSubmit","evt","preventDefault","formData","FormData","data","fieldsValidation","field","error","find","nextElementSibling","ruleValidation","validStatus","hasRequire","hasMinLength","hasRegex","hasInteger","textContent","classList","add","remove","push","Object","values","every","it","disabled","post","onSuccessSent","onError","message","setSuccessStatus","setErrorStatus","console","forEach","addEventListener","STATUS_OK","TIME_WAIT","URL","METHOD","POST","setup","onSuccess","xhr","XMLHttpRequest","timeout","status","JSON","parse","response","statusText","body","onLoad","open","send"],"mappings":"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","file":"js.8f1a6af8.js","sourceRoot":"..\\markup\\pages","sourcesContent":["{\n  const form = document.querySelector(`.js-connect-form`);\n  const inputs = [...form.elements];\n  const statusSent = document.querySelector(`.js-status-sent`);\n  const submitButton = form.querySelector(`button`);\n\n  const REGEX = {\n    EMAIL: /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/,\n    COUNTRY_CODE: /^\\+[0-9]+$/,\n  };\n\n  const schema = {\n    firstName: {\n      name: `First name`,\n      required: true,\n      minLength: 3,\n    },\n    lastName: {\n      name: `Last name`,\n      required: true,\n      minLength: 3,\n    },\n    email: {\n      name: `Email`,\n      required: true,\n      regex: REGEX.EMAIL,\n    },\n    phonePrefix: {\n      name: `Country code`,\n      required: true,\n      regex: REGEX.COUNTRY_CODE,\n    },\n    phone: {\n      name: `Phone`,\n      required: true,\n      integer: true,\n      minLength: 7,\n    }\n  };\n\n  const errorMessages = {\n    getMinLength: (name, value) => `${name} must have at least ${value} characters`,\n    getRequired: (name) => `${name} is a required field`,\n    getRightFormat: (value) => `Please enter a valid ${value}`,\n    getOnlyNumbers: (value) => `${value} should be only digits`\n  };\n\n  const checkValidity = (value, schemaObject) => {\n    const result = {};\n\n    for (const item in schemaObject) {\n      if (!schemaObject.hasOwnProperty(item)) continue;\n      switch (item) {\n        case `required`:\n          result[item] = value.length > 0;\n          break;\n        case `minLength`:\n          result[item] = value.length >= schemaObject.minLength;\n          break;\n        case `regex`:\n          result[item] = schemaObject.regex.test(value);\n          break;\n        case `integer`:\n          result[item] = Number(value) && typeof Number(value) === 'number';\n          break;\n      }\n    }\n    return result;\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    const formData = new FormData(form);\n    const data = [...formData];\n    const fieldsValidation = [];\n\n    for (const field of data) {\n      const [name, value] = field;\n      const input = inputs.find(item => item.name === name);\n      const error = input.nextElementSibling;\n      const ruleValidation = schema[name];\n      const validStatus = checkValidity(value, ruleValidation);\n\n      const hasRequire = validStatus.hasOwnProperty('required');\n      const hasMinLength = validStatus.hasOwnProperty('minLength');\n      const hasRegex = validStatus.hasOwnProperty('regex');\n      const hasInteger = validStatus.hasOwnProperty('integer');\n\n\n      if (hasRequire && !validStatus.required) {\n        error.textContent = errorMessages.getRequired(ruleValidation.name);\n        error.classList.add(`show`);\n      } else if (hasInteger && !validStatus.integer) {\n        error.textContent = errorMessages.getOnlyNumbers(ruleValidation.name);\n        error.classList.add(`show`);\n      } else if (hasMinLength && !validStatus.minLength) {\n        error.textContent = errorMessages.getMinLength(ruleValidation.name, ruleValidation.minLength);\n        error.classList.add(`show`);\n      } else if (hasRegex && !validStatus.regex) {\n        error.textContent = errorMessages.getRightFormat(ruleValidation.name);\n        error.classList.add(`show`);\n      } else {\n        error.textContent = ``;\n        error.classList.remove(`show`);\n      }\n      fieldsValidation.push(...Object.values(validStatus));\n    }\n    const isFormValid = fieldsValidation.every(it => it);\n\n    if (isFormValid) {\n      submitButton.disabled = !submitButton.disabled;\n      post(formData, onSuccessSent, onError);\n    }\n  };\n\n  const onSuccessSent = ({message}) => {\n    message === `success` ? setSuccessStatus() : setErrorStatus();\n  };\n\n  const onError = () => {\n    submitButton.disabled = !submitButton.disabled;\n    console.error(`Something went wrong`);\n  };\n\n  const setSuccessStatus = () => {\n    inputs.forEach(it => it.value = ``);\n    statusSent.textContent = `The form has been sent successfully, we will contact you`;\n    statusSent.classList.add(`success`);\n    statusSent.classList.remove(`error`);\n    submitButton.disabled = false;\n  };\n\n  const setErrorStatus = () => {\n    statusSent.textContent = `Something went wrong, the email did not pass the check`;\n    statusSent.classList.remove(`success`);\n    statusSent.classList.add(`error`);\n    submitButton.disabled = false;\n  };\n\n  form && form.addEventListener(`submit`, handleSubmit);\n\n\n  /* XHR Request */\n  const STATUS_OK = 200;\n  const TIME_WAIT = 10000;\n  const URL = `./check-email.php`;\n  const METHOD = {\n    POST: `POST`,\n  };\n\n  const setup = function (onSuccess, onError) {\n    const xhr = new XMLHttpRequest();\n    xhr.timeout = TIME_WAIT;\n    xhr.addEventListener(`load`, () => {\n      if (xhr.status === STATUS_OK) {\n        onSuccess(JSON.parse(xhr.response));\n      } else {\n        onError(`Unknown status: ${xhr.status}: ${xhr.statusText}`);\n      }\n    });\n\n    xhr.addEventListener('error', () => {\n      onError('Connection failed');\n    });\n\n    xhr.addEventListener('timeout', () => {\n      onError(`Request did not manage to fulfill for ${xhr.timeout}ms`);\n    });\n    return xhr;\n  };\n\n  const post = (body, onLoad, onError) => {\n    const xhr = setup(onLoad, onError);\n    xhr.open(METHOD.POST, URL);\n    xhr.send(body);\n  };\n\n}\n"]}